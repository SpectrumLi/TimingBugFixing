
---- compile the code:
compile the wala in lib:
	compile it => ./run.sh
	change the java_runtime_dir // the wala-1.3.5 can only process the jre before java-1.7(include 1.7).
export EF_Location = %location to Exclusion.txt in directory%
ant compile.

---- explanation:
-- lib : the libraries that compilation relies on.
-- src : source code.
-- software : the code before and after patch for every benchmark.
-- jarfile : the jar files that static analysis needs.
-- benchmark : the input and intermedia result for every benchmark.
-- build : the binary and the scripts for generating the patch.
-- Exclusion.txt : the filter for useless class for static analysis
	

---- benchmark:
-- config : basic information. bug type, the location of racing operations and so on.
	in the config file, the ef needs changes: the correct location for Exclusion.txt
-- css : causality chain for wait operation
-- signalcss : causality chain for signal operation.
-- ftconfig : adandonned now. used for filtering the critical races to fix.
-- jarscope : all the jar files for static analysis
-- patchGuide : the rollback destiny location, the checking location and the computation for the memory address key. 
-- slicing : slice for memory address computation.
-- seffect : the causality chain for signal operation for signalcss.
-- slicing : generated by slicer.sh.
-- patchGuide : generated by sideeffect.sh.
-- others : ignored. these are historial files.

---- build:
before run the script, change the benchmark and walalib to the correct location.
-- slicer.sh : build the slice for the waiting operation for address computation.
-- prove.sh  : based on the slicer.sh result, it will prove the longest unchanged slice from the waiting operation.
This ensures the precompution(part of the slice) does not change too much. This property is helpful for accurate prediction.
-- sideeffect.sh : find the Checking location and Restart Location. Generate the patch guide.
-- finalpatch.sh : generate the patch based on the sideeffect.sh result. 


