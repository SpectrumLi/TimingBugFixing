original code = 
 this.zk.takeSnapshot(); this.txnLogFactory.save( this.zkDb.getDataTree(),this.zkDb.getSessionWithTimeOuts());

record code = 
String tempfn=this.txnLogFactory.save_path( this.zkDb.getDataTree(),this.zkDb.getSessionWithTimeOuts());
dfix_write(tempfn,0 );

fastforward code = 
this.zk.takeSnapshot();
paras = !
original code = 
 this.self.setCurrentEpoch( newEpoch); this.writeLongToFile( e);

record code = 
String tempfn=this.writeLongToFile_path( e);
dfix_write(tempfn,0);

replace paras : e -> newEpoch
String tempfn=this.self.writeLongToFile_path_content( newEpoch);

fastforward code = 
String tempfn=this.self.writeLongToFile_path_content( newEpoch);
dfix_write(tempfn,0);

paras = newEpoch e !
original code = 
 this.zkHelper.deleteRsQueues( rsZnode); this.zookeeper.deleteNodeRecursively( org.apache.hadoop.hbase.zookeeper.ZKUtil.joinZNode(this.rsZNode, znode));

record code = 
String tempfn=this.zookeeper.deleteNodeRecursively_path( org.apache.hadoop.hbase.zookeeper.ZKUtil.joinZNode(this.rsZNode, znode));
dfix_write(tempfn,0);

replace paras :  znode -> rsZnode
String tempfn=this.zkHelper.zookeeper.deleteNodeRecursively_path_content( org.apache.hadoop.hbase.zookeeper.ZKUtil.joinZNode(this.zkHelper.rsZNode,rsZnode));

fastforward code = 
String tempfn=this.zkHelper.zookeeper.deleteNodeRecursively_path_content( org.apache.hadoop.hbase.zookeeper.ZKUtil.joinZNode(this.zkHelper.rsZNode,rsZnode));
dfix_write(tempfn,0);

paras = rsZnode  znode !
original code = 
 this.transitionZookeeperOfflineToOpening( encodedName,this.versionOfOfflineNode); this.server.getZooKeeper().transitionNode( this.regionInfo,this.server.getServerName(),org.apache.hadoop.hbase.executor.EventType.M_ZK_REGION_OFFLINE,org.apache.hadoop.hbase.executor.EventType.RS_ZK_REGION_OPENING,versionOfOfflineNode);

record code = 
String tempfn=this.server.getZooKeeper().transitionNode_path( this.regionInfo,this.server.getServerName(),org.apache.hadoop.hbase.executor.EventType.M_ZK_REGION_OFFLINE,org.apache.hadoop.hbase.executor.EventType.RS_ZK_REGION_OPENING,versionOfOfflineNode);
dfix_write(tempfn,1);

fastforward code = 
String tempfn=this.server.getZooKeeper().transitionNode_path_content( this.regionInfo,this.server.getServerName(),org.apache.hadoop.hbase.executor.EventType.M_ZK_REGION_OFFLINE,org.apache.hadoop.hbase.executor.EventType.RS_ZK_REGION_OPENING,versionOfOfflineNode);
dfix_write(tempfn,1);

paras = encodedName org.apache.hadoop.hbase.executor.EventType.M_ZK_REGION_OFFLINE org.apache.hadoop.hbase.executor.EventType.RS_ZK_REGION_OPENING versionOfOfflineNode !
original code = 
 this.transitionToOpened( region); this.server.getZooKeeper().transitionNodeOpened( hri,this.server.getServerName(),this.version);

record code = 
String tempfn=this.server.getZooKeeper().transitionNodeOpened_path( hri,this.server.getServerName(),this.version);
dfix_write(tempfn,1);

replace paras : hri -> region
String tempfn=this.server.getZooKeeper().transitionNodeOpened_path_content( region,this.server.getServerName(),this.version);

fastforward code = 
String tempfn=this.server.getZooKeeper().transitionNodeOpened_path_content( region,this.server.getServerName(),this.version);
dfix_write(tempfn,1);

paras = region hri !
