public String writeLongToFile_path(String name, long value) throw IOException{ 
	File file = new File(logFactory.getSnapDir(), name); 
	return file.getAbsolutePath();}

public String writeLongToFile_patch_content(String name, long value) throw IOException{
  String s0 = writeLongToFile_patch(name, value);
  return s0+" "+ value;
}

public String save_patch((DataTree dataTree,ConcurrentHashMap<Long, Integer> sessionsWithTimeouts)
	throws IOException {
	long lastZxid = dataTree.lastProcessedZxid;
	File snapshotFile = new File(snapDir, Util.makeSnapshotName(lastZxid));
	return snapshotFile.getAbsolutePath();
	}

public String save_patch_content((DataTree dataTree,ConcurrentHashMap<Long, Integer> sessionsWithTimeouts)
throws IOException {
  String s0 = save_patch(dataTree,sessionsWithTimeouts);
  return s0 + " Empty";
}

public static void deleteNodeRecursively_path(ZooKeeperWatcher zkw, String node)
throws KeeperException {
    String s0 = "";
    try {
      List<String> children = ZKUtil.listChildrenNoWatch(zkw, node);
      s0 = s0 + node+"\n";
      if(!children.isEmpty()) {
        for(String child : children) {
          s0 = s0+ deleteNodeRecursively_path(zkw, joinZNode(node, child));
        }
      }
    } catch(InterruptedException ie) {
      zkw.interruptedException(ie);
    }
}

public static void deleteNodeRecursively_path_content(ZooKeeperWatcher zkw, String node)
throws KeeperException {
    String s0 = "";
    try {
      List<String> children = ZKUtil.listChildrenNoWatch(zkw, node);
      s0 = s0 + node + " " + ZKUtil.getData(zkw, node) +"\n";
      if(!children.isEmpty()) {
        for(String child : children) {
          s0 = s0 + deleteNodeRecursivelyi_path_content(zkw, joinZNode(node, child));
        }
      }
    } catch(InterruptedException ie) {
      zkw.interruptedException(ie);
    }
}
