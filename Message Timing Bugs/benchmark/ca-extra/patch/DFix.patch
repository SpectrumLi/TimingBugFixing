--- BootStrapper.java	2019-03-26 15:25:52.543053850 -0500
+++ ../patched-code/BootStrapper.java	2019-03-26 15:25:52.543053850 -0500
@@ -42,7 +42,8 @@
  import org.apache.cassandra.gms.IFailureDetector;
  import com.google.common.collect.Multimap;
  import com.google.common.collect.ArrayListMultimap;
-
+ 
+ import com.uchicago.dfix.*;
 
 public class BootStrapper
 {
@@ -211,7 +212,7 @@
         public void doVerb(Message message)
         {
             StorageService ss = StorageService.instance; String tokenString=null;
-            tokenString = ss.getBootstrapToken().toString();
+            tokenString = DFix.Wait(this)?ss.getBootstrapToken().toString():DFix.INVALID_VALUE;
             Message response;
             try
             {
--- StorageService.java	2019-03-26 15:25:52.543053850 -0500
+++ ../patched-code/StorageService.java	2019-03-26 15:49:36.263435950 -0500
@@ -63,6 +63,8 @@
 import org.apache.log4j.Level;
 import org.apache.log4j.Logger;
 
+import com.uchicago.dfix.*;
+
 /*
  * This abstraction contains the token/identifier of this node
  * on the identifier space. This token gets gossiped around.
@@ -193,6 +195,7 @@
             logger_.debug("Setting token to " + token);
         SystemTable.updateToken(token);
         tokenMetadata_.updateNormalToken(token, FBUtilities.getLocalAddress());
+	DFix.SET(this);
     }
 
     public StorageService()
@@ -359,7 +362,12 @@
                 throw new UnsupportedOperationException(s);
             }
             setMode("Joining: getting bootstrap token", true); Token token = null;
+	    /*DF_ReEx_Start*/
+	    while(DFix.ShouldLoop(this)){
             token = BootStrapper.getBootstrapToken(tokenMetadata_, StorageLoadBalancer.instance.getLoadInfo());
+	    if (DFix.IsNotInvalid(token)) break;
+	    }
+	    /*DF_ReEx_End*/
             startBootstrap(token);
             // don't finish startup (enabling thrift) until after bootstrap is done
             while (isBootstrapMode)
